
MySTM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018dc  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001a8c  08001a8c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08001a8c  08001a8c  00011a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001a90  08001a90  00011a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000000  08001a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
  7 .bss          00000064  20000018  20000018  00020018  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000007c  2000007c  00020018  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 10 .debug_info   00007e06  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000138e  00000000  00000000  00027e4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000948  00000000  00000000  000291e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000880  00000000  00000000  00029b28  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003541  00000000  00000000  0002a3a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000033f8  00000000  00000000  0002d8e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00030ce1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002988  00000000  00000000  00030d60  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  000336e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000018 	.word	0x20000018
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001a74 	.word	0x08001a74

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	08001a74 	.word	0x08001a74

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f092 0f00 	teq	r2, #0
 80004da:	bf14      	ite	ne
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e720      	b.n	8000334 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aedc 	beq.w	80002e2 <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6c1      	b.n	80002e2 <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_d2uiz>:
 8000a94:	004a      	lsls	r2, r1, #1
 8000a96:	d211      	bcs.n	8000abc <__aeabi_d2uiz+0x28>
 8000a98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a9c:	d211      	bcs.n	8000ac2 <__aeabi_d2uiz+0x2e>
 8000a9e:	d50d      	bpl.n	8000abc <__aeabi_d2uiz+0x28>
 8000aa0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa8:	d40e      	bmi.n	8000ac8 <__aeabi_d2uiz+0x34>
 8000aaa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ab6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ac6:	d102      	bne.n	8000ace <__aeabi_d2uiz+0x3a>
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8000acc:	4770      	bx	lr
 8000ace:	f04f 0000 	mov.w	r0, #0
 8000ad2:	4770      	bx	lr

08000ad4 <TIM2_IRQHandler>:
#if defined(TM_DELAY_TIM)
void TM_DELAY_INT_InitTIM(void);
#endif

#if defined(TM_DELAY_TIM)
void TM_DELAY_TIM_IRQ_HANDLER(void) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
	TM_DELAY_TIM->SR = ~TIM_IT_Update;
 8000ada:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ade:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000ae2:	821a      	strh	r2, [r3, #16]
#else
void SysTick_Handler(void) {
#endif
	uint8_t i;
	
	TM_Time++;
 8000ae4:	4b37      	ldr	r3, [pc, #220]	; (8000bc4 <TIM2_IRQHandler+0xf0>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	4a36      	ldr	r2, [pc, #216]	; (8000bc4 <TIM2_IRQHandler+0xf0>)
 8000aec:	6013      	str	r3, [r2, #0]
	if (TM_Time2 != 0x00) {
 8000aee:	4b36      	ldr	r3, [pc, #216]	; (8000bc8 <TIM2_IRQHandler+0xf4>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d004      	beq.n	8000b00 <TIM2_IRQHandler+0x2c>
		TM_Time2--;
 8000af6:	4b34      	ldr	r3, [pc, #208]	; (8000bc8 <TIM2_IRQHandler+0xf4>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	3b01      	subs	r3, #1
 8000afc:	4a32      	ldr	r2, [pc, #200]	; (8000bc8 <TIM2_IRQHandler+0xf4>)
 8000afe:	6013      	str	r3, [r2, #0]
	}
	
	/* Call user function */
	TM_DELAY_1msHandler();
 8000b00:	f3af 8000 	nop.w
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 8000b04:	2300      	movs	r3, #0
 8000b06:	71fb      	strb	r3, [r7, #7]
 8000b08:	e052      	b.n	8000bb0 <TIM2_IRQHandler+0xdc>
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	4a2f      	ldr	r2, [pc, #188]	; (8000bcc <TIM2_IRQHandler+0xf8>)
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	4413      	add	r3, r2
 8000b12:	685b      	ldr	r3, [r3, #4]
		if (
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d048      	beq.n	8000baa <TIM2_IRQHandler+0xd6>
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	4a2c      	ldr	r2, [pc, #176]	; (8000bcc <TIM2_IRQHandler+0xf8>)
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	4413      	add	r3, r2
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	7b1b      	ldrb	r3, [r3, #12]
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d040      	beq.n	8000baa <TIM2_IRQHandler+0xd6>
			CustomTimers.Timers[i]->CNT > 0    /*!< Counter is not NULL */
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	4a28      	ldr	r2, [pc, #160]	; (8000bcc <TIM2_IRQHandler+0xf8>)
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	4413      	add	r3, r2
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	689b      	ldr	r3, [r3, #8]
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d038      	beq.n	8000baa <TIM2_IRQHandler+0xd6>
		) {
			/* Decrease counter */
			CustomTimers.Timers[i]->CNT--;
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	4a24      	ldr	r2, [pc, #144]	; (8000bcc <TIM2_IRQHandler+0xf8>)
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	4413      	add	r3, r2
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	689a      	ldr	r2, [r3, #8]
 8000b44:	3a01      	subs	r2, #1
 8000b46:	609a      	str	r2, [r3, #8]
			
			/* Check if count is zero */
			if (CustomTimers.Timers[i]->CNT == 0) {
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	4a20      	ldr	r2, [pc, #128]	; (8000bcc <TIM2_IRQHandler+0xf8>)
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	4413      	add	r3, r2
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d128      	bne.n	8000baa <TIM2_IRQHandler+0xd6>
				/* Call user callback function */
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i]->UserParameters);
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	4a1c      	ldr	r2, [pc, #112]	; (8000bcc <TIM2_IRQHandler+0xf8>)
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	4413      	add	r3, r2
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	691a      	ldr	r2, [r3, #16]
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	4919      	ldr	r1, [pc, #100]	; (8000bcc <TIM2_IRQHandler+0xf8>)
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	440b      	add	r3, r1
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	695b      	ldr	r3, [r3, #20]
 8000b70:	4618      	mov	r0, r3
 8000b72:	4790      	blx	r2
				
				/* Set new counter value */
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	4a15      	ldr	r2, [pc, #84]	; (8000bcc <TIM2_IRQHandler+0xf8>)
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	4413      	add	r3, r2
 8000b7c:	685a      	ldr	r2, [r3, #4]
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	4912      	ldr	r1, [pc, #72]	; (8000bcc <TIM2_IRQHandler+0xf8>)
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	440b      	add	r3, r1
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	6093      	str	r3, [r2, #8]
				
				/* Disable timer if auto reload feature is not used */
				if (!CustomTimers.Timers[i]->AutoReload) {
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	4a0f      	ldr	r2, [pc, #60]	; (8000bcc <TIM2_IRQHandler+0xf8>)
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	4413      	add	r3, r2
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d106      	bne.n	8000baa <TIM2_IRQHandler+0xd6>
					/* Disable counter */
					CustomTimers.Timers[i]->Enabled = 0;
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	4a0b      	ldr	r2, [pc, #44]	; (8000bcc <TIM2_IRQHandler+0xf8>)
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	4413      	add	r3, r2
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < CustomTimers.Count; i++) {
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	3301      	adds	r3, #1
 8000bae:	71fb      	strb	r3, [r7, #7]
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <TIM2_IRQHandler+0xf8>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	79fa      	ldrb	r2, [r7, #7]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d3a7      	bcc.n	8000b0a <TIM2_IRQHandler+0x36>
				}
			}
		}
	}
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000034 	.word	0x20000034
 8000bc8:	20000038 	.word	0x20000038
 8000bcc:	20000040 	.word	0x20000040

08000bd0 <TM_DELAY_Init>:

void TM_DELAY_Init(void) {	
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
#if defined(TM_DELAY_TIM)
	TM_DELAY_INT_InitTIM();
 8000bd4:	f000 f808 	bl	8000be8 <TM_DELAY_INT_InitTIM>
		mult = SystemCoreClock / 3000000;
	#endif
#endif
	
	/* Set initialized flag */
	TM_DELAY_Initialized = 1;
 8000bd8:	4b02      	ldr	r3, [pc, #8]	; (8000be4 <TM_DELAY_Init+0x14>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	701a      	strb	r2, [r3, #0]
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	2000003c 	.word	0x2000003c

08000be8 <TM_DELAY_INT_InitTIM>:
#endif
}

/* Internal functions */
#if defined(TM_DELAY_TIM)
void TM_DELAY_INT_InitTIM(void) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	; 0x28
 8000bec:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStruct;
	NVIC_InitTypeDef NVIC_InitStruct;
	TM_TIMER_PROPERTIES_t TIM_Data;
	
	/* Get timer properties */
	TM_TIMER_PROPERTIES_GetTimerProperties(TM_DELAY_TIM, &TIM_Data);
 8000bee:	463b      	mov	r3, r7
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000bf6:	f000 f92d 	bl	8000e54 <TM_TIMER_PROPERTIES_GetTimerProperties>
	
	/* Generate timer properties, 1us ticks */
	TM_TIMER_PROPERTIES_GenerateDataForWorkingFrequency(&TIM_Data, 1000000);
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	ed9f 0b28 	vldr	d0, [pc, #160]	; 8000ca0 <TM_DELAY_INT_InitTIM+0xb8>
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 f9a7 	bl	8000f54 <TM_TIMER_PROPERTIES_GenerateDataForWorkingFrequency>
	
	/* Enable clock for TIMx */
	TM_TIMER_PROPERTIES_EnableClock(TM_DELAY_TIM);
 8000c06:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c0a:	f000 fa2f 	bl	800106c <TM_TIMER_PROPERTIES_EnableClock>
	
	/* Set timer settings */
	TIM_TimeBaseStruct.TIM_ClockDivision = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	84bb      	strh	r3, [r7, #36]	; 0x24
	TIM_TimeBaseStruct.TIM_CounterMode = TIM_CounterMode_Up;
 8000c12:	2300      	movs	r3, #0
 8000c14:	83fb      	strh	r3, [r7, #30]
	TIM_TimeBaseStruct.TIM_Period = 999; /* 1 millisecond */
 8000c16:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000c1a:	623b      	str	r3, [r7, #32]
	TIM_TimeBaseStruct.TIM_Prescaler = SystemCoreClock / (1000000 * (SystemCoreClock / TIM_Data.TimerFrequency)) - 1; /* With prescaler for 1 microsecond tick */
 8000c1c:	4b22      	ldr	r3, [pc, #136]	; (8000ca8 <TM_DELAY_INT_InitTIM+0xc0>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b21      	ldr	r3, [pc, #132]	; (8000ca8 <TM_DELAY_INT_InitTIM+0xc0>)
 8000c22:	6819      	ldr	r1, [r3, #0]
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c2a:	4920      	ldr	r1, [pc, #128]	; (8000cac <TM_DELAY_INT_InitTIM+0xc4>)
 8000c2c:	fb01 f303 	mul.w	r3, r1, r3
 8000c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	3b01      	subs	r3, #1
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	83bb      	strh	r3, [r7, #28]
	TIM_TimeBaseStruct.TIM_RepetitionCounter = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	
	/* Initialize timer */
	TIM_TimeBaseInit(TM_DELAY_TIM, &TIM_TimeBaseStruct);
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	4619      	mov	r1, r3
 8000c48:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c4c:	f000 fcd6 	bl	80015fc <TIM_TimeBaseInit>
	
	/* Enable interrupt each update cycle */
	TM_DELAY_TIM->DIER |= TIM_IT_Update;
 8000c50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c58:	899b      	ldrh	r3, [r3, #12]
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	8193      	strh	r3, [r2, #12]
	
	/* Set NVIC parameters */
	NVIC_InitStruct.NVIC_IRQChannel = TM_DELAY_TIM_IRQ;
 8000c64:	231c      	movs	r3, #28
 8000c66:	763b      	strb	r3, [r7, #24]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	76fb      	strb	r3, [r7, #27]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	767b      	strb	r3, [r7, #25]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	76bb      	strb	r3, [r7, #26]
	
	/* Add to NVIC */
	NVIC_Init(&NVIC_InitStruct);
 8000c74:	f107 0318 	add.w	r3, r7, #24
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f000 fa9b 	bl	80011b4 <NVIC_Init>
	
	/* Start timer */
	TM_DELAY_TIM->CR1 |= TIM_CR1_CEN;
 8000c7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c86:	881b      	ldrh	r3, [r3, #0]
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	f043 0301 	orr.w	r3, r3, #1
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	8013      	strh	r3, [r2, #0]
}
 8000c92:	bf00      	nop
 8000c94:	3728      	adds	r7, #40	; 0x28
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	f3af 8000 	nop.w
 8000ca0:	00000000 	.word	0x00000000
 8000ca4:	412e8480 	.word	0x412e8480
 8000ca8:	20000014 	.word	0x20000014
 8000cac:	000f4240 	.word	0x000f4240

08000cb0 <TM_GPIO_Init>:
/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af02      	add	r7, sp, #8
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	4608      	mov	r0, r1
 8000cba:	4611      	mov	r1, r2
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	807b      	strh	r3, [r7, #2]
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	707b      	strb	r3, [r7, #1]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	703b      	strb	r3, [r7, #0]
	/* Check input */
	if (GPIO_Pin == 0x00) {
 8000cca:	887b      	ldrh	r3, [r7, #2]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d00e      	beq.n	8000cee <TM_GPIO_Init+0x3e>
		return;
	}
	
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f000 f821 	bl	8000d18 <TM_GPIO_INT_EnableClock>
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8000cd6:	7838      	ldrb	r0, [r7, #0]
 8000cd8:	787a      	ldrb	r2, [r7, #1]
 8000cda:	8879      	ldrh	r1, [r7, #2]
 8000cdc:	7d3b      	ldrb	r3, [r7, #20]
 8000cde:	9301      	str	r3, [sp, #4]
 8000ce0:	7c3b      	ldrb	r3, [r7, #16]
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f000 f82e 	bl	8000d48 <TM_GPIO_INT_Init>
 8000cec:	e000      	b.n	8000cf0 <TM_GPIO_Init+0x40>
		return;
 8000cee:	bf00      	nop
}
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <TM_GPIO_GetPortSource>:
	
	/* Return source */
	return pinsource;
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 8000d04:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8000d08:	0a9b      	lsrs	r3, r3, #10
 8000d0a:	b29b      	uxth	r3, r3
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff ffe8 	bl	8000cf6 <TM_GPIO_GetPortSource>
 8000d26:	4603      	mov	r3, r0
 8000d28:	461a      	mov	r2, r3
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	fa03 f102 	lsl.w	r1, r3, r2
 8000d30:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <TM_GPIO_INT_EnableClock+0x2c>)
 8000d32:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <TM_GPIO_INT_EnableClock+0x2c>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	430b      	orrs	r3, r1
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40023800 	.word	0x40023800

08000d48 <TM_GPIO_INT_Init>:
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx) {
	/* Clear bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	4608      	mov	r0, r1
 8000d52:	4611      	mov	r1, r2
 8000d54:	461a      	mov	r2, r3
 8000d56:	4603      	mov	r3, r0
 8000d58:	807b      	strh	r3, [r7, #2]
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	707b      	strb	r3, [r7, #1]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	703b      	strb	r3, [r7, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f7ff ffc7 	bl	8000cf6 <TM_GPIO_GetPortSource>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	73bb      	strb	r3, [r7, #14]
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	73fb      	strb	r3, [r7, #15]
 8000d70:	e067      	b.n	8000e42 <TM_GPIO_INT_Init+0xfa>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 8000d72:	887a      	ldrh	r2, [r7, #2]
 8000d74:	7bfb      	ldrb	r3, [r7, #15]
 8000d76:	fa42 f303 	asr.w	r3, r2, r3
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d05b      	beq.n	8000e3a <TM_GPIO_INT_Init+0xf2>
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 8000d82:	7bbb      	ldrb	r3, [r7, #14]
 8000d84:	7bba      	ldrb	r2, [r7, #14]
 8000d86:	4932      	ldr	r1, [pc, #200]	; (8000e50 <TM_GPIO_INT_Init+0x108>)
 8000d88:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000d8c:	b211      	sxth	r1, r2
 8000d8e:	7bfa      	ldrb	r2, [r7, #15]
 8000d90:	2001      	movs	r0, #1
 8000d92:	fa00 f202 	lsl.w	r2, r0, r2
 8000d96:	b212      	sxth	r2, r2
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	b212      	sxth	r2, r2
 8000d9c:	b291      	uxth	r1, r2
 8000d9e:	4a2c      	ldr	r2, [pc, #176]	; (8000e50 <TM_GPIO_INT_Init+0x108>)
 8000da0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	7bfa      	ldrb	r2, [r7, #15]
 8000daa:	0052      	lsls	r2, r2, #1
 8000dac:	2103      	movs	r1, #3
 8000dae:	fa01 f202 	lsl.w	r2, r1, r2
 8000db2:	43d2      	mvns	r2, r2
 8000db4:	4013      	ands	r3, r2
 8000db6:	7e39      	ldrb	r1, [r7, #24]
 8000db8:	7bfa      	ldrb	r2, [r7, #15]
 8000dba:	0052      	lsls	r2, r2, #1
 8000dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc0:	431a      	orrs	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	60da      	str	r2, [r3, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	2103      	movs	r1, #3
 8000dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	7879      	ldrb	r1, [r7, #1]
 8000dda:	7bfa      	ldrb	r2, [r7, #15]
 8000ddc:	0052      	lsls	r2, r2, #1
 8000dde:	fa01 f202 	lsl.w	r2, r1, r2
 8000de2:	431a      	orrs	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	601a      	str	r2, [r3, #0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8000de8:	787b      	ldrb	r3, [r7, #1]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d002      	beq.n	8000df4 <TM_GPIO_INT_Init+0xac>
 8000dee:	787b      	ldrb	r3, [r7, #1]
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d123      	bne.n	8000e3c <TM_GPIO_INT_Init+0xf4>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	7bfa      	ldrb	r2, [r7, #15]
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8000e00:	b292      	uxth	r2, r2
 8000e02:	43d2      	mvns	r2, r2
 8000e04:	4013      	ands	r3, r2
 8000e06:	7839      	ldrb	r1, [r7, #0]
 8000e08:	7bfa      	ldrb	r2, [r7, #15]
 8000e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e0e:	b292      	uxth	r2, r2
 8000e10:	431a      	orrs	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	605a      	str	r2, [r3, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	689a      	ldr	r2, [r3, #8]
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	2103      	movs	r1, #3
 8000e20:	fa01 f303 	lsl.w	r3, r1, r3
 8000e24:	43db      	mvns	r3, r3
 8000e26:	4013      	ands	r3, r2
 8000e28:	7f39      	ldrb	r1, [r7, #28]
 8000e2a:	7bfa      	ldrb	r2, [r7, #15]
 8000e2c:	0052      	lsls	r2, r2, #1
 8000e2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e32:	431a      	orrs	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	e000      	b.n	8000e3c <TM_GPIO_INT_Init+0xf4>
			continue;
 8000e3a:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	73fb      	strb	r3, [r7, #15]
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	2b0f      	cmp	r3, #15
 8000e46:	d994      	bls.n	8000d72 <TM_GPIO_INT_Init+0x2a>
		}
	}
}
 8000e48:	bf00      	nop
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000058 	.word	0x20000058

08000e54 <TM_TIMER_PROPERTIES_GetTimerProperties>:
 * | along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * |----------------------------------------------------------------------
 */
#include "tm_stm32f4_timer_properties.h"
	 
TM_TIMER_PROPERTIES_Result_t TM_TIMER_PROPERTIES_GetTimerProperties(TIM_TypeDef* TIMx, TM_TIMER_PROPERTIES_t* Timer_Data) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
	RCC_ClocksTypeDef RCC_ClocksStruct;

	/* Get clocks */
	RCC_GetClocksFreq(&RCC_ClocksStruct);
 8000e5e:	f107 0308 	add.w	r3, r7, #8
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 fae2 	bl	800142c <RCC_GetClocksFreq>
	
	/* All timers have 16-bit prescaler */
	Timer_Data->MaxPrescaler = 0xFFFF;
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e6e:	609a      	str	r2, [r3, #8]
	
	if ( /* 32bit timers with PCLK2 max frequency */
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e76:	d003      	beq.n	8000e80 <TM_TIMER_PROPERTIES_GetTimerProperties+0x2c>
		TIMx == TIM2 ||
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a29      	ldr	r2, [pc, #164]	; (8000f20 <TM_TIMER_PROPERTIES_GetTimerProperties+0xcc>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d108      	bne.n	8000e92 <TM_TIMER_PROPERTIES_GetTimerProperties+0x3e>
		TIMx == TIM5
	) {
		Timer_Data->TimerFrequency = RCC_ClocksStruct.PCLK2_Frequency;	/* Clock */
 8000e80:	697a      	ldr	r2, [r7, #20]
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	601a      	str	r2, [r3, #0]
		Timer_Data->MaxPeriod = 0xFFFFFFFF;							/* Max period */
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	f04f 32ff 	mov.w	r2, #4294967295
 8000e8c:	605a      	str	r2, [r3, #4]
		
		return TM_TIMER_PROPERTIES_Result_Ok;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	e042      	b.n	8000f18 <TM_TIMER_PROPERTIES_GetTimerProperties+0xc4>
	} else if (	/* 16bit timers with HCLK clock frequency */
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a23      	ldr	r2, [pc, #140]	; (8000f24 <TM_TIMER_PROPERTIES_GetTimerProperties+0xd0>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d00f      	beq.n	8000eba <TM_TIMER_PROPERTIES_GetTimerProperties+0x66>
		TIMx == TIM1 ||
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a22      	ldr	r2, [pc, #136]	; (8000f28 <TM_TIMER_PROPERTIES_GetTimerProperties+0xd4>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d00b      	beq.n	8000eba <TM_TIMER_PROPERTIES_GetTimerProperties+0x66>
		TIMx == TIM8 ||
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a21      	ldr	r2, [pc, #132]	; (8000f2c <TM_TIMER_PROPERTIES_GetTimerProperties+0xd8>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d007      	beq.n	8000eba <TM_TIMER_PROPERTIES_GetTimerProperties+0x66>
		TIMx == TIM9 ||
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a20      	ldr	r2, [pc, #128]	; (8000f30 <TM_TIMER_PROPERTIES_GetTimerProperties+0xdc>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d003      	beq.n	8000eba <TM_TIMER_PROPERTIES_GetTimerProperties+0x66>
		TIMx == TIM10 ||
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a1f      	ldr	r2, [pc, #124]	; (8000f34 <TM_TIMER_PROPERTIES_GetTimerProperties+0xe0>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d108      	bne.n	8000ecc <TM_TIMER_PROPERTIES_GetTimerProperties+0x78>
		TIMx == TIM11
	) {
		Timer_Data->TimerFrequency = RCC_ClocksStruct.HCLK_Frequency;	/* Clock */
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	601a      	str	r2, [r3, #0]
		Timer_Data->MaxPeriod = 0xFFFF;								/* Max period */
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ec6:	605a      	str	r2, [r3, #4]
		
		return TM_TIMER_PROPERTIES_Result_Ok;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	e025      	b.n	8000f18 <TM_TIMER_PROPERTIES_GetTimerProperties+0xc4>
	} else if (	/* 16bit timers with PCLK2 clock frequency */
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a1a      	ldr	r2, [pc, #104]	; (8000f38 <TM_TIMER_PROPERTIES_GetTimerProperties+0xe4>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d017      	beq.n	8000f04 <TM_TIMER_PROPERTIES_GetTimerProperties+0xb0>
		TIMx == TIM3 ||
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a19      	ldr	r2, [pc, #100]	; (8000f3c <TM_TIMER_PROPERTIES_GetTimerProperties+0xe8>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d013      	beq.n	8000f04 <TM_TIMER_PROPERTIES_GetTimerProperties+0xb0>
		TIMx == TIM4 ||
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a18      	ldr	r2, [pc, #96]	; (8000f40 <TM_TIMER_PROPERTIES_GetTimerProperties+0xec>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d00f      	beq.n	8000f04 <TM_TIMER_PROPERTIES_GetTimerProperties+0xb0>
		TIMx == TIM6 ||
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a17      	ldr	r2, [pc, #92]	; (8000f44 <TM_TIMER_PROPERTIES_GetTimerProperties+0xf0>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d00b      	beq.n	8000f04 <TM_TIMER_PROPERTIES_GetTimerProperties+0xb0>
		TIMx == TIM7 ||
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a16      	ldr	r2, [pc, #88]	; (8000f48 <TM_TIMER_PROPERTIES_GetTimerProperties+0xf4>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d007      	beq.n	8000f04 <TM_TIMER_PROPERTIES_GetTimerProperties+0xb0>
		TIMx == TIM12 ||
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a15      	ldr	r2, [pc, #84]	; (8000f4c <TM_TIMER_PROPERTIES_GetTimerProperties+0xf8>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d003      	beq.n	8000f04 <TM_TIMER_PROPERTIES_GetTimerProperties+0xb0>
		TIMx == TIM13 ||
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a14      	ldr	r2, [pc, #80]	; (8000f50 <TM_TIMER_PROPERTIES_GetTimerProperties+0xfc>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d108      	bne.n	8000f16 <TM_TIMER_PROPERTIES_GetTimerProperties+0xc2>
		TIMx == TIM14
	) {
		Timer_Data->TimerFrequency = RCC_ClocksStruct.PCLK2_Frequency;	/* Clock */
 8000f04:	697a      	ldr	r2, [r7, #20]
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	601a      	str	r2, [r3, #0]
		Timer_Data->MaxPeriod = 0xFFFF;								/* Max period */
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f10:	605a      	str	r2, [r3, #4]
		
		return TM_TIMER_PROPERTIES_Result_Ok;
 8000f12:	2300      	movs	r3, #0
 8000f14:	e000      	b.n	8000f18 <TM_TIMER_PROPERTIES_GetTimerProperties+0xc4>
	}
	/* Timer is not valid */
	return TM_TIMER_PROPERTIES_Result_TimerNotValid;
 8000f16:	2302      	movs	r3, #2
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40000c00 	.word	0x40000c00
 8000f24:	40010000 	.word	0x40010000
 8000f28:	40010400 	.word	0x40010400
 8000f2c:	40014000 	.word	0x40014000
 8000f30:	40014400 	.word	0x40014400
 8000f34:	40014800 	.word	0x40014800
 8000f38:	40000400 	.word	0x40000400
 8000f3c:	40000800 	.word	0x40000800
 8000f40:	40001000 	.word	0x40001000
 8000f44:	40001400 	.word	0x40001400
 8000f48:	40001800 	.word	0x40001800
 8000f4c:	40001c00 	.word	0x40001c00
 8000f50:	40002000 	.word	0x40002000

08000f54 <TM_TIMER_PROPERTIES_GenerateDataForWorkingFrequency>:

TM_TIMER_PROPERTIES_Result_t TM_TIMER_PROPERTIES_GenerateDataForWorkingFrequency(TM_TIMER_PROPERTIES_t* Timer_Data, double frequency) {
 8000f54:	b590      	push	{r4, r7, lr}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	ed87 0b00 	vstr	d0, [r7]
	if (frequency > Timer_Data->TimerFrequency) {
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fa85 	bl	8000474 <__aeabi_ui2d>
 8000f6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f6e:	f7ff fd69 	bl	8000a44 <__aeabi_dcmplt>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d00a      	beq.n	8000f8e <TM_TIMER_PROPERTIES_GenerateDataForWorkingFrequency+0x3a>
		/* Reset values */
		Timer_Data->Prescaler = 0;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	611a      	str	r2, [r3, #16]
		Timer_Data->Period = 0;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	2200      	movs	r2, #0
 8000f82:	60da      	str	r2, [r3, #12]
		Timer_Data->Frequency = 0;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2200      	movs	r2, #0
 8000f88:	615a      	str	r2, [r3, #20]
		
		/* Frequency too high */
		return TM_TIMER_PROPERTIES_Result_FrequencyTooHigh;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e069      	b.n	8001062 <TM_TIMER_PROPERTIES_GenerateDataForWorkingFrequency+0x10e>
	} else if (frequency == 0) {
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	f04f 0300 	mov.w	r3, #0
 8000f96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f9a:	f7ff fd49 	bl	8000a30 <__aeabi_dcmpeq>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d00a      	beq.n	8000fba <TM_TIMER_PROPERTIES_GenerateDataForWorkingFrequency+0x66>
		/* Reset values */
		Timer_Data->Prescaler = 0;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	611a      	str	r2, [r3, #16]
		Timer_Data->Period = 0;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2200      	movs	r2, #0
 8000fae:	60da      	str	r2, [r3, #12]
		Timer_Data->Frequency = 0;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	615a      	str	r2, [r3, #20]
		
		/* Not valid frequency */
		return TM_TIMER_PROPERTIES_Result_FrequencyTooLow;
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	e053      	b.n	8001062 <TM_TIMER_PROPERTIES_GenerateDataForWorkingFrequency+0x10e>
	}
	
	/* Fix for 16/32bit timers */
	if (Timer_Data->MaxPeriod <= 0xFFFF) {
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fc2:	d204      	bcs.n	8000fce <TM_TIMER_PROPERTIES_GenerateDataForWorkingFrequency+0x7a>
		Timer_Data->MaxPeriod++;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	1c5a      	adds	r2, r3, #1
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	605a      	str	r2, [r3, #4]
	}
	
	/* Get minimum prescaler and maximum resolution for timer */
	Timer_Data->Prescaler = 0;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
	do {
		/* Get clock */
		Timer_Data->Period = (Timer_Data->TimerFrequency / (Timer_Data->Prescaler + 1));
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	691b      	ldr	r3, [r3, #16]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	fbb2 f2f3 	udiv	r2, r2, r3
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	60da      	str	r2, [r3, #12]
		/* Get period */
		Timer_Data->Period = (Timer_Data->Period / frequency);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fa42 	bl	8000474 <__aeabi_ui2d>
 8000ff0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ff4:	f7ff fbde 	bl	80007b4 <__aeabi_ddiv>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	460c      	mov	r4, r1
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	4621      	mov	r1, r4
 8001000:	f7ff fd48 	bl	8000a94 <__aeabi_d2uiz>
 8001004:	4602      	mov	r2, r0
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	60da      	str	r2, [r3, #12]
		/* Increase prescaler value */
		Timer_Data->Prescaler++;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	691b      	ldr	r3, [r3, #16]
 800100e:	1c5a      	adds	r2, r3, #1
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	611a      	str	r2, [r3, #16]
	} while (Timer_Data->Period > (Timer_Data->MaxPeriod) && Timer_Data->Prescaler <= (Timer_Data->MaxPrescaler + 1));
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	68da      	ldr	r2, [r3, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	429a      	cmp	r2, r3
 800101e:	d906      	bls.n	800102e <TM_TIMER_PROPERTIES_GenerateDataForWorkingFrequency+0xda>
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	691a      	ldr	r2, [r3, #16]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	3301      	adds	r3, #1
 800102a:	429a      	cmp	r2, r3
 800102c:	d9d2      	bls.n	8000fd4 <TM_TIMER_PROPERTIES_GenerateDataForWorkingFrequency+0x80>
	/* Check for too low frequency */ 
	if (Timer_Data->Prescaler > (Timer_Data->MaxPrescaler + 1)) {
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	691a      	ldr	r2, [r3, #16]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	3301      	adds	r3, #1
 8001038:	429a      	cmp	r2, r3
 800103a:	d90a      	bls.n	8001052 <TM_TIMER_PROPERTIES_GenerateDataForWorkingFrequency+0xfe>
		/* Reset values */
		Timer_Data->Prescaler = 0;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
		Timer_Data->Period = 0;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	2200      	movs	r2, #0
 8001046:	60da      	str	r2, [r3, #12]
		Timer_Data->Frequency = 0;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2200      	movs	r2, #0
 800104c:	615a      	str	r2, [r3, #20]
		
		/* Prescaler too high, frequency is too low for use */
		return TM_TIMER_PROPERTIES_Result_FrequencyTooLow;
 800104e:	2304      	movs	r3, #4
 8001050:	e007      	b.n	8001062 <TM_TIMER_PROPERTIES_GenerateDataForWorkingFrequency+0x10e>
	}
	
	/* Set frequency */
	Timer_Data->Frequency = frequency;
 8001052:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001056:	f7ff fd1d 	bl	8000a94 <__aeabi_d2uiz>
 800105a:	4602      	mov	r2, r0
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	615a      	str	r2, [r3, #20]
	
	/* Return OK */
	return TM_TIMER_PROPERTIES_Result_Ok;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	bd90      	pop	{r4, r7, pc}
	...

0800106c <TM_TIMER_PROPERTIES_EnableClock>:

TM_TIMER_PROPERTIES_Result_t TM_TIMER_PROPERTIES_EnableClock(TIM_TypeDef* TIMx) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	if (TIMx == TIM1) {
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a42      	ldr	r2, [pc, #264]	; (8001180 <TM_TIMER_PROPERTIES_EnableClock+0x114>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d104      	bne.n	8001086 <TM_TIMER_PROPERTIES_EnableClock+0x1a>
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 800107c:	2101      	movs	r1, #1
 800107e:	2001      	movs	r0, #1
 8001080:	f000 fa9c 	bl	80015bc <RCC_APB2PeriphClockCmd>
 8001084:	e077      	b.n	8001176 <TM_TIMER_PROPERTIES_EnableClock+0x10a>
	} else if (TIMx == TIM2) {
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800108c:	d104      	bne.n	8001098 <TM_TIMER_PROPERTIES_EnableClock+0x2c>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 800108e:	2101      	movs	r1, #1
 8001090:	2001      	movs	r0, #1
 8001092:	f000 fa73 	bl	800157c <RCC_APB1PeriphClockCmd>
 8001096:	e06e      	b.n	8001176 <TM_TIMER_PROPERTIES_EnableClock+0x10a>
	} else if (TIMx == TIM3) {
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a3a      	ldr	r2, [pc, #232]	; (8001184 <TM_TIMER_PROPERTIES_EnableClock+0x118>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d104      	bne.n	80010aa <TM_TIMER_PROPERTIES_EnableClock+0x3e>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 80010a0:	2101      	movs	r1, #1
 80010a2:	2002      	movs	r0, #2
 80010a4:	f000 fa6a 	bl	800157c <RCC_APB1PeriphClockCmd>
 80010a8:	e065      	b.n	8001176 <TM_TIMER_PROPERTIES_EnableClock+0x10a>
	} else if (TIMx == TIM4) {
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a36      	ldr	r2, [pc, #216]	; (8001188 <TM_TIMER_PROPERTIES_EnableClock+0x11c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d104      	bne.n	80010bc <TM_TIMER_PROPERTIES_EnableClock+0x50>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 80010b2:	2101      	movs	r1, #1
 80010b4:	2004      	movs	r0, #4
 80010b6:	f000 fa61 	bl	800157c <RCC_APB1PeriphClockCmd>
 80010ba:	e05c      	b.n	8001176 <TM_TIMER_PROPERTIES_EnableClock+0x10a>
	} else if (TIMx == TIM5) {
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a33      	ldr	r2, [pc, #204]	; (800118c <TM_TIMER_PROPERTIES_EnableClock+0x120>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d104      	bne.n	80010ce <TM_TIMER_PROPERTIES_EnableClock+0x62>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
 80010c4:	2101      	movs	r1, #1
 80010c6:	2008      	movs	r0, #8
 80010c8:	f000 fa58 	bl	800157c <RCC_APB1PeriphClockCmd>
 80010cc:	e053      	b.n	8001176 <TM_TIMER_PROPERTIES_EnableClock+0x10a>
	} else if (TIMx == TIM6) {
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a2f      	ldr	r2, [pc, #188]	; (8001190 <TM_TIMER_PROPERTIES_EnableClock+0x124>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d104      	bne.n	80010e0 <TM_TIMER_PROPERTIES_EnableClock+0x74>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
 80010d6:	2101      	movs	r1, #1
 80010d8:	2010      	movs	r0, #16
 80010da:	f000 fa4f 	bl	800157c <RCC_APB1PeriphClockCmd>
 80010de:	e04a      	b.n	8001176 <TM_TIMER_PROPERTIES_EnableClock+0x10a>
	} else if (TIMx == TIM7) {
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a2c      	ldr	r2, [pc, #176]	; (8001194 <TM_TIMER_PROPERTIES_EnableClock+0x128>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d104      	bne.n	80010f2 <TM_TIMER_PROPERTIES_EnableClock+0x86>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
 80010e8:	2101      	movs	r1, #1
 80010ea:	2020      	movs	r0, #32
 80010ec:	f000 fa46 	bl	800157c <RCC_APB1PeriphClockCmd>
 80010f0:	e041      	b.n	8001176 <TM_TIMER_PROPERTIES_EnableClock+0x10a>
	} else if (TIMx == TIM8) {
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a28      	ldr	r2, [pc, #160]	; (8001198 <TM_TIMER_PROPERTIES_EnableClock+0x12c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d104      	bne.n	8001104 <TM_TIMER_PROPERTIES_EnableClock+0x98>
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);
 80010fa:	2101      	movs	r1, #1
 80010fc:	2002      	movs	r0, #2
 80010fe:	f000 fa5d 	bl	80015bc <RCC_APB2PeriphClockCmd>
 8001102:	e038      	b.n	8001176 <TM_TIMER_PROPERTIES_EnableClock+0x10a>
	} else if (TIMx == TIM9) {
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a25      	ldr	r2, [pc, #148]	; (800119c <TM_TIMER_PROPERTIES_EnableClock+0x130>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d105      	bne.n	8001118 <TM_TIMER_PROPERTIES_EnableClock+0xac>
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM9, ENABLE);
 800110c:	2101      	movs	r1, #1
 800110e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001112:	f000 fa53 	bl	80015bc <RCC_APB2PeriphClockCmd>
 8001116:	e02e      	b.n	8001176 <TM_TIMER_PROPERTIES_EnableClock+0x10a>
	} else if (TIMx == TIM10) {
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a21      	ldr	r2, [pc, #132]	; (80011a0 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d105      	bne.n	800112c <TM_TIMER_PROPERTIES_EnableClock+0xc0>
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM10, ENABLE);
 8001120:	2101      	movs	r1, #1
 8001122:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001126:	f000 fa49 	bl	80015bc <RCC_APB2PeriphClockCmd>
 800112a:	e024      	b.n	8001176 <TM_TIMER_PROPERTIES_EnableClock+0x10a>
	} else if (TIMx == TIM11) {
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a1d      	ldr	r2, [pc, #116]	; (80011a4 <TM_TIMER_PROPERTIES_EnableClock+0x138>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d105      	bne.n	8001140 <TM_TIMER_PROPERTIES_EnableClock+0xd4>
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM11, ENABLE);
 8001134:	2101      	movs	r1, #1
 8001136:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800113a:	f000 fa3f 	bl	80015bc <RCC_APB2PeriphClockCmd>
 800113e:	e01a      	b.n	8001176 <TM_TIMER_PROPERTIES_EnableClock+0x10a>
	} else if (TIMx == TIM12) {
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a19      	ldr	r2, [pc, #100]	; (80011a8 <TM_TIMER_PROPERTIES_EnableClock+0x13c>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d104      	bne.n	8001152 <TM_TIMER_PROPERTIES_EnableClock+0xe6>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM12, ENABLE);
 8001148:	2101      	movs	r1, #1
 800114a:	2040      	movs	r0, #64	; 0x40
 800114c:	f000 fa16 	bl	800157c <RCC_APB1PeriphClockCmd>
 8001150:	e011      	b.n	8001176 <TM_TIMER_PROPERTIES_EnableClock+0x10a>
	} else if (TIMx == TIM13) {
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a15      	ldr	r2, [pc, #84]	; (80011ac <TM_TIMER_PROPERTIES_EnableClock+0x140>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d104      	bne.n	8001164 <TM_TIMER_PROPERTIES_EnableClock+0xf8>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM13, ENABLE);
 800115a:	2101      	movs	r1, #1
 800115c:	2080      	movs	r0, #128	; 0x80
 800115e:	f000 fa0d 	bl	800157c <RCC_APB1PeriphClockCmd>
 8001162:	e008      	b.n	8001176 <TM_TIMER_PROPERTIES_EnableClock+0x10a>
	} else if (TIMx == TIM14) {
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a12      	ldr	r2, [pc, #72]	; (80011b0 <TM_TIMER_PROPERTIES_EnableClock+0x144>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d104      	bne.n	8001176 <TM_TIMER_PROPERTIES_EnableClock+0x10a>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM14, ENABLE);
 800116c:	2101      	movs	r1, #1
 800116e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001172:	f000 fa03 	bl	800157c <RCC_APB1PeriphClockCmd>
	}
	/* Return OK */
	return TM_TIMER_PROPERTIES_Result_Ok;
 8001176:	2300      	movs	r3, #0
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40010000 	.word	0x40010000
 8001184:	40000400 	.word	0x40000400
 8001188:	40000800 	.word	0x40000800
 800118c:	40000c00 	.word	0x40000c00
 8001190:	40001000 	.word	0x40001000
 8001194:	40001400 	.word	0x40001400
 8001198:	40010400 	.word	0x40010400
 800119c:	40014000 	.word	0x40014000
 80011a0:	40014400 	.word	0x40014400
 80011a4:	40014800 	.word	0x40014800
 80011a8:	40001800 	.word	0x40001800
 80011ac:	40001c00 	.word	0x40001c00
 80011b0:	40002000 	.word	0x40002000

080011b4 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80011bc:	2300      	movs	r3, #0
 80011be:	73fb      	strb	r3, [r7, #15]
 80011c0:	2300      	movs	r3, #0
 80011c2:	73bb      	strb	r3, [r7, #14]
 80011c4:	230f      	movs	r3, #15
 80011c6:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	78db      	ldrb	r3, [r3, #3]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d039      	beq.n	8001244 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80011d0:	4b27      	ldr	r3, [pc, #156]	; (8001270 <NVIC_Init+0xbc>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	0a1b      	lsrs	r3, r3, #8
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	f1c3 0304 	rsb	r3, r3, #4
 80011e6:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80011e8:	7b7a      	ldrb	r2, [r7, #13]
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	fa42 f303 	asr.w	r3, r2, r3
 80011f0:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	785b      	ldrb	r3, [r3, #1]
 80011f6:	461a      	mov	r2, r3
 80011f8:	7bbb      	ldrb	r3, [r7, #14]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	789a      	ldrb	r2, [r3, #2]
 8001204:	7b7b      	ldrb	r3, [r7, #13]
 8001206:	4013      	ands	r3, r2
 8001208:	b2da      	uxtb	r2, r3
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	4313      	orrs	r3, r2
 800120e:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	011b      	lsls	r3, r3, #4
 8001214:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001216:	4a17      	ldr	r2, [pc, #92]	; (8001274 <NVIC_Init+0xc0>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4413      	add	r3, r2
 800121e:	7bfa      	ldrb	r2, [r7, #15]
 8001220:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001224:	4a13      	ldr	r2, [pc, #76]	; (8001274 <NVIC_Init+0xc0>)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	095b      	lsrs	r3, r3, #5
 800122c:	b2db      	uxtb	r3, r3
 800122e:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	f003 031f 	and.w	r3, r3, #31
 8001238:	2101      	movs	r1, #1
 800123a:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800123e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8001242:	e00f      	b.n	8001264 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001244:	490b      	ldr	r1, [pc, #44]	; (8001274 <NVIC_Init+0xc0>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	095b      	lsrs	r3, r3, #5
 800124c:	b2db      	uxtb	r3, r3
 800124e:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	f003 031f 	and.w	r3, r3, #31
 8001258:	2201      	movs	r2, #1
 800125a:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800125c:	f100 0320 	add.w	r3, r0, #32
 8001260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001264:	bf00      	nop
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000ed00 	.word	0xe000ed00
 8001274:	e000e100 	.word	0xe000e100

08001278 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001284:	78fb      	ldrb	r3, [r7, #3]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d006      	beq.n	8001298 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f043 0201 	orr.w	r2, r3, #1
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8001296:	e005      	b.n	80012a4 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f023 0201 	bic.w	r2, r3, #1
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	601a      	str	r2, [r3, #0]
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b087      	sub	sp, #28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80012ba:	2300      	movs	r3, #0
 80012bc:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a15      	ldr	r2, [pc, #84]	; (800131c <DMA_GetFlagStatus+0x6c>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d802      	bhi.n	80012d0 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80012ca:	4b15      	ldr	r3, [pc, #84]	; (8001320 <DMA_GetFlagStatus+0x70>)
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	e001      	b.n	80012d4 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80012d0:	4b14      	ldr	r3, [pc, #80]	; (8001324 <DMA_GetFlagStatus+0x74>)
 80012d2:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	e002      	b.n	80012ec <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80012f2:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80012f6:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	4013      	ands	r3, r2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d002      	beq.n	8001308 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8001302:	2301      	movs	r3, #1
 8001304:	75fb      	strb	r3, [r7, #23]
 8001306:	e001      	b.n	800130c <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8001308:	2300      	movs	r3, #0
 800130a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 800130c:	7dfb      	ldrb	r3, [r7, #23]
}
 800130e:	4618      	mov	r0, r3
 8001310:	371c      	adds	r7, #28
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	4002640f 	.word	0x4002640f
 8001320:	40026000 	.word	0x40026000
 8001324:	40026400 	.word	0x40026400

08001328 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a10      	ldr	r2, [pc, #64]	; (8001378 <DMA_ClearFlag+0x50>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d802      	bhi.n	8001340 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800133a:	4b10      	ldr	r3, [pc, #64]	; (800137c <DMA_ClearFlag+0x54>)
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	e001      	b.n	8001344 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001340:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <DMA_ClearFlag+0x58>)
 8001342:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d007      	beq.n	800135e <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001354:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001358:	68fa      	ldr	r2, [r7, #12]
 800135a:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 800135c:	e006      	b.n	800136c <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001364:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001368:	68fa      	ldr	r2, [r7, #12]
 800136a:	6093      	str	r3, [r2, #8]
}
 800136c:	bf00      	nop
 800136e:	3714      	adds	r7, #20
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	4002640f 	.word	0x4002640f
 800137c:	40026000 	.word	0x40026000
 8001380:	40026400 	.word	0x40026400

08001384 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001390:	78fb      	ldrb	r3, [r7, #3]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d008      	beq.n	80013a8 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	b29b      	uxth	r3, r3
 800139c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 80013a6:	e007      	b.n	80013b8 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	801a      	strh	r2, [r3, #0]
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b087      	sub	sp, #28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80013ce:	2300      	movs	r3, #0
 80013d0:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	0f1b      	lsrs	r3, r3, #28
 80013e2:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80013ea:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	3314      	adds	r3, #20
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	e005      	b.n	8001406 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	0c1b      	lsrs	r3, r3, #16
 80013fe:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	3318      	adds	r3, #24
 8001404:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	4013      	ands	r3, r2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d002      	beq.n	8001418 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8001412:	2301      	movs	r3, #1
 8001414:	75fb      	strb	r3, [r7, #23]
 8001416:	e001      	b.n	800141c <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8001418:	2300      	movs	r3, #0
 800141a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 800141c:	7dfb      	ldrb	r3, [r7, #23]
}
 800141e:	4618      	mov	r0, r3
 8001420:	371c      	adds	r7, #28
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800142c:	b480      	push	{r7}
 800142e:	b089      	sub	sp, #36	; 0x24
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001434:	2300      	movs	r3, #0
 8001436:	61bb      	str	r3, [r7, #24]
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
 8001440:	2302      	movs	r3, #2
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	2302      	movs	r3, #2
 800144a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800144c:	4b47      	ldr	r3, [pc, #284]	; (800156c <RCC_GetClocksFreq+0x140>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f003 030c 	and.w	r3, r3, #12
 8001454:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	2b04      	cmp	r3, #4
 800145a:	d007      	beq.n	800146c <RCC_GetClocksFreq+0x40>
 800145c:	2b08      	cmp	r3, #8
 800145e:	d009      	beq.n	8001474 <RCC_GetClocksFreq+0x48>
 8001460:	2b00      	cmp	r3, #0
 8001462:	d13d      	bne.n	80014e0 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a42      	ldr	r2, [pc, #264]	; (8001570 <RCC_GetClocksFreq+0x144>)
 8001468:	601a      	str	r2, [r3, #0]
      break;
 800146a:	e03d      	b.n	80014e8 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a41      	ldr	r2, [pc, #260]	; (8001574 <RCC_GetClocksFreq+0x148>)
 8001470:	601a      	str	r2, [r3, #0]
      break;
 8001472:	e039      	b.n	80014e8 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001474:	4b3d      	ldr	r3, [pc, #244]	; (800156c <RCC_GetClocksFreq+0x140>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	0d9b      	lsrs	r3, r3, #22
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001480:	4b3a      	ldr	r3, [pc, #232]	; (800156c <RCC_GetClocksFreq+0x140>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001488:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d00c      	beq.n	80014aa <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001490:	4a38      	ldr	r2, [pc, #224]	; (8001574 <RCC_GetClocksFreq+0x148>)
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	fbb2 f3f3 	udiv	r3, r2, r3
 8001498:	4a34      	ldr	r2, [pc, #208]	; (800156c <RCC_GetClocksFreq+0x140>)
 800149a:	6852      	ldr	r2, [r2, #4]
 800149c:	0992      	lsrs	r2, r2, #6
 800149e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80014a2:	fb02 f303 	mul.w	r3, r2, r3
 80014a6:	61fb      	str	r3, [r7, #28]
 80014a8:	e00b      	b.n	80014c2 <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80014aa:	4a31      	ldr	r2, [pc, #196]	; (8001570 <RCC_GetClocksFreq+0x144>)
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b2:	4a2e      	ldr	r2, [pc, #184]	; (800156c <RCC_GetClocksFreq+0x140>)
 80014b4:	6852      	ldr	r2, [r2, #4]
 80014b6:	0992      	lsrs	r2, r2, #6
 80014b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80014bc:	fb02 f303 	mul.w	r3, r2, r3
 80014c0:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80014c2:	4b2a      	ldr	r3, [pc, #168]	; (800156c <RCC_GetClocksFreq+0x140>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	0c1b      	lsrs	r3, r3, #16
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	3301      	adds	r3, #1
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80014d2:	69fa      	ldr	r2, [r7, #28]
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	601a      	str	r2, [r3, #0]
      break;
 80014de:	e003      	b.n	80014e8 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a23      	ldr	r2, [pc, #140]	; (8001570 <RCC_GetClocksFreq+0x144>)
 80014e4:	601a      	str	r2, [r3, #0]
      break;
 80014e6:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80014e8:	4b20      	ldr	r3, [pc, #128]	; (800156c <RCC_GetClocksFreq+0x140>)
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014f0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	091b      	lsrs	r3, r3, #4
 80014f6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80014f8:	4a1f      	ldr	r2, [pc, #124]	; (8001578 <RCC_GetClocksFreq+0x14c>)
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	4413      	add	r3, r2
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	40da      	lsrs	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001510:	4b16      	ldr	r3, [pc, #88]	; (800156c <RCC_GetClocksFreq+0x140>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001518:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	0a9b      	lsrs	r3, r3, #10
 800151e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001520:	4a15      	ldr	r2, [pc, #84]	; (8001578 <RCC_GetClocksFreq+0x14c>)
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	4413      	add	r3, r2
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	b2db      	uxtb	r3, r3
 800152a:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	40da      	lsrs	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <RCC_GetClocksFreq+0x140>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001540:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	0b5b      	lsrs	r3, r3, #13
 8001546:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001548:	4a0b      	ldr	r2, [pc, #44]	; (8001578 <RCC_GetClocksFreq+0x14c>)
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	4413      	add	r3, r2
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	40da      	lsrs	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	60da      	str	r2, [r3, #12]
}
 8001560:	bf00      	nop
 8001562:	3724      	adds	r7, #36	; 0x24
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	40023800 	.word	0x40023800
 8001570:	00f42400 	.word	0x00f42400
 8001574:	007a1200 	.word	0x007a1200
 8001578:	20000000 	.word	0x20000000

0800157c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001588:	78fb      	ldrb	r3, [r7, #3]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d006      	beq.n	800159c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800158e:	490a      	ldr	r1, [pc, #40]	; (80015b8 <RCC_APB1PeriphClockCmd+0x3c>)
 8001590:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <RCC_APB1PeriphClockCmd+0x3c>)
 8001592:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4313      	orrs	r3, r2
 8001598:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800159a:	e006      	b.n	80015aa <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800159c:	4906      	ldr	r1, [pc, #24]	; (80015b8 <RCC_APB1PeriphClockCmd+0x3c>)
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <RCC_APB1PeriphClockCmd+0x3c>)
 80015a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	4013      	ands	r3, r2
 80015a8:	640b      	str	r3, [r1, #64]	; 0x40
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800

080015bc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80015c8:	78fb      	ldrb	r3, [r7, #3]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d006      	beq.n	80015dc <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80015ce:	490a      	ldr	r1, [pc, #40]	; (80015f8 <RCC_APB2PeriphClockCmd+0x3c>)
 80015d0:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <RCC_APB2PeriphClockCmd+0x3c>)
 80015d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80015da:	e006      	b.n	80015ea <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80015dc:	4906      	ldr	r1, [pc, #24]	; (80015f8 <RCC_APB2PeriphClockCmd+0x3c>)
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <RCC_APB2PeriphClockCmd+0x3c>)
 80015e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	4013      	ands	r3, r2
 80015e8:	644b      	str	r3, [r1, #68]	; 0x44
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800

080015fc <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a29      	ldr	r2, [pc, #164]	; (80016b8 <TIM_TimeBaseInit+0xbc>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d013      	beq.n	8001640 <TIM_TimeBaseInit+0x44>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a28      	ldr	r2, [pc, #160]	; (80016bc <TIM_TimeBaseInit+0xc0>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d00f      	beq.n	8001640 <TIM_TimeBaseInit+0x44>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001626:	d00b      	beq.n	8001640 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a25      	ldr	r2, [pc, #148]	; (80016c0 <TIM_TimeBaseInit+0xc4>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d007      	beq.n	8001640 <TIM_TimeBaseInit+0x44>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a24      	ldr	r2, [pc, #144]	; (80016c4 <TIM_TimeBaseInit+0xc8>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d003      	beq.n	8001640 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a23      	ldr	r2, [pc, #140]	; (80016c8 <TIM_TimeBaseInit+0xcc>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d108      	bne.n	8001652 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8001640:	89fb      	ldrh	r3, [r7, #14]
 8001642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001646:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	885a      	ldrh	r2, [r3, #2]
 800164c:	89fb      	ldrh	r3, [r7, #14]
 800164e:	4313      	orrs	r3, r2
 8001650:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a1d      	ldr	r2, [pc, #116]	; (80016cc <TIM_TimeBaseInit+0xd0>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d00c      	beq.n	8001674 <TIM_TimeBaseInit+0x78>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a1c      	ldr	r2, [pc, #112]	; (80016d0 <TIM_TimeBaseInit+0xd4>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d008      	beq.n	8001674 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8001662:	89fb      	ldrh	r3, [r7, #14]
 8001664:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001668:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	891a      	ldrh	r2, [r3, #8]
 800166e:	89fb      	ldrh	r3, [r7, #14]
 8001670:	4313      	orrs	r3, r2
 8001672:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	89fa      	ldrh	r2, [r7, #14]
 8001678:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	881a      	ldrh	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a0a      	ldr	r2, [pc, #40]	; (80016b8 <TIM_TimeBaseInit+0xbc>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d003      	beq.n	800169a <TIM_TimeBaseInit+0x9e>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a09      	ldr	r2, [pc, #36]	; (80016bc <TIM_TimeBaseInit+0xc0>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d104      	bne.n	80016a4 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	7a9b      	ldrb	r3, [r3, #10]
 800169e:	b29a      	uxth	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	829a      	strh	r2, [r3, #20]
}
 80016aa:	bf00      	nop
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	40010000 	.word	0x40010000
 80016bc:	40010400 	.word	0x40010400
 80016c0:	40000400 	.word	0x40000400
 80016c4:	40000800 	.word	0x40000800
 80016c8:	40000c00 	.word	0x40000c00
 80016cc:	40001000 	.word	0x40001000
 80016d0:	40001400 	.word	0x40001400

080016d4 <DMA1_Stream4_IRQHandler>:
  * @brief  This function handles the DMA Tx Channel interrupt Handler.
  * @param  None
  * @retval None
  */
void sEE_I2C_DMA_TX_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */
  if(DMA_GetFlagStatus(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_TCIF) != RESET)
 80016d8:	4916      	ldr	r1, [pc, #88]	; (8001734 <DMA1_Stream4_IRQHandler+0x60>)
 80016da:	4817      	ldr	r0, [pc, #92]	; (8001738 <DMA1_Stream4_IRQHandler+0x64>)
 80016dc:	f7ff fde8 	bl	80012b0 <DMA_GetFlagStatus>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d024      	beq.n	8001730 <DMA1_Stream4_IRQHandler+0x5c>
  {  
    /* Disable the DMA Tx Stream and Clear TC flag */  
    DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
 80016e6:	2100      	movs	r1, #0
 80016e8:	4813      	ldr	r0, [pc, #76]	; (8001738 <DMA1_Stream4_IRQHandler+0x64>)
 80016ea:	f7ff fdc5 	bl	8001278 <DMA_Cmd>
    DMA_ClearFlag(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_TCIF);
 80016ee:	4911      	ldr	r1, [pc, #68]	; (8001734 <DMA1_Stream4_IRQHandler+0x60>)
 80016f0:	4811      	ldr	r0, [pc, #68]	; (8001738 <DMA1_Stream4_IRQHandler+0x64>)
 80016f2:	f7ff fe19 	bl	8001328 <DMA_ClearFlag>

    /*!< Wait till all data have been physically transferred on the bus */
    sEETimeout = sEE_LONG_TIMEOUT;
 80016f6:	4b11      	ldr	r3, [pc, #68]	; (800173c <DMA1_Stream4_IRQHandler+0x68>)
 80016f8:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80016fc:	601a      	str	r2, [r3, #0]
    while(!I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BTF))
 80016fe:	e008      	b.n	8001712 <DMA1_Stream4_IRQHandler+0x3e>
    {
      if((sEETimeout--) == 0) sEE_TIMEOUT_UserCallback();
 8001700:	4b0e      	ldr	r3, [pc, #56]	; (800173c <DMA1_Stream4_IRQHandler+0x68>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	1e5a      	subs	r2, r3, #1
 8001706:	490d      	ldr	r1, [pc, #52]	; (800173c <DMA1_Stream4_IRQHandler+0x68>)
 8001708:	600a      	str	r2, [r1, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <DMA1_Stream4_IRQHandler+0x3e>
 800170e:	f000 f885 	bl	800181c <sEE_TIMEOUT_UserCallback>
    while(!I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BTF))
 8001712:	490b      	ldr	r1, [pc, #44]	; (8001740 <DMA1_Stream4_IRQHandler+0x6c>)
 8001714:	480b      	ldr	r0, [pc, #44]	; (8001744 <DMA1_Stream4_IRQHandler+0x70>)
 8001716:	f7ff fe55 	bl	80013c4 <I2C_GetFlagStatus>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0ef      	beq.n	8001700 <DMA1_Stream4_IRQHandler+0x2c>
    }
    
    /*!< Send STOP condition */
    I2C_GenerateSTOP(sEE_I2C, ENABLE);
 8001720:	2101      	movs	r1, #1
 8001722:	4808      	ldr	r0, [pc, #32]	; (8001744 <DMA1_Stream4_IRQHandler+0x70>)
 8001724:	f7ff fe2e 	bl	8001384 <I2C_GenerateSTOP>
    
    /* Reset the variable holding the number of data to be written */
    *sEEDataWritePointer = 0;  
 8001728:	4b07      	ldr	r3, [pc, #28]	; (8001748 <DMA1_Stream4_IRQHandler+0x74>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2200      	movs	r2, #0
 800172e:	701a      	strb	r2, [r3, #0]
  }
}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000020 	.word	0x20000020
 8001738:	40026070 	.word	0x40026070
 800173c:	20000010 	.word	0x20000010
 8001740:	10000004 	.word	0x10000004
 8001744:	40005c00 	.word	0x40005c00
 8001748:	20000070 	.word	0x20000070

0800174c <DMA1_Stream2_IRQHandler>:
  * @brief  This function handles the DMA Rx Channel interrupt Handler.
  * @param  None
  * @retval None
  */
void sEE_I2C_DMA_RX_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */
  if(DMA_GetFlagStatus(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_TCIF) != RESET)
 8001750:	f04f 5181 	mov.w	r1, #270532608	; 0x10200000
 8001754:	480c      	ldr	r0, [pc, #48]	; (8001788 <DMA1_Stream2_IRQHandler+0x3c>)
 8001756:	f7ff fdab 	bl	80012b0 <DMA_GetFlagStatus>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d010      	beq.n	8001782 <DMA1_Stream2_IRQHandler+0x36>
  {      
    /*!< Send STOP Condition */
    I2C_GenerateSTOP(sEE_I2C, ENABLE);    
 8001760:	2101      	movs	r1, #1
 8001762:	480a      	ldr	r0, [pc, #40]	; (800178c <DMA1_Stream2_IRQHandler+0x40>)
 8001764:	f7ff fe0e 	bl	8001384 <I2C_GenerateSTOP>
    
    /* Disable the DMA Rx Stream and Clear TC Flag */  
    DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
 8001768:	2100      	movs	r1, #0
 800176a:	4807      	ldr	r0, [pc, #28]	; (8001788 <DMA1_Stream2_IRQHandler+0x3c>)
 800176c:	f7ff fd84 	bl	8001278 <DMA_Cmd>
    DMA_ClearFlag(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_TCIF);
 8001770:	f04f 5181 	mov.w	r1, #270532608	; 0x10200000
 8001774:	4804      	ldr	r0, [pc, #16]	; (8001788 <DMA1_Stream2_IRQHandler+0x3c>)
 8001776:	f7ff fdd7 	bl	8001328 <DMA_ClearFlag>
    
    /* Reset the variable holding the number of data to be read */
    *sEEDataReadPointer = 0;
 800177a:	4b05      	ldr	r3, [pc, #20]	; (8001790 <DMA1_Stream2_IRQHandler+0x44>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2200      	movs	r2, #0
 8001780:	801a      	strh	r2, [r3, #0]
  }
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40026040 	.word	0x40026040
 800178c:	40005c00 	.word	0x40005c00
 8001790:	20000078 	.word	0x20000078

08001794 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af02      	add	r7, sp, #8
	/* Initialize system */
	SystemInit();
 800179a:	f000 f895 	bl	80018c8 <SystemInit>

	/* Initialize delay */
	TM_DELAY_Init();
 800179e:	f7ff fa17 	bl	8000bd0 <TM_DELAY_Init>

	/* Reset counter to 0 */
	TM_DELAY_SetTime(0);
 80017a2:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <main+0x7c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]

	/* Initialize leds on board */
	/* Set pins as output */
	TM_GPIO_Init(TM_DISCO_LED_PORT, LED_ALL, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High);
 80017a8:	2303      	movs	r3, #3
 80017aa:	9301      	str	r3, [sp, #4]
 80017ac:	2300      	movs	r3, #0
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	2300      	movs	r3, #0
 80017b2:	2201      	movs	r2, #1
 80017b4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80017b8:	4816      	ldr	r0, [pc, #88]	; (8001814 <main+0x80>)
 80017ba:	f7ff fa79 	bl	8000cb0 <TM_GPIO_Init>

	/* Turn leds off */
	TM_DISCO_LedOff(LED_ALL);
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <main+0x80>)
 80017c0:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80017c4:	835a      	strh	r2, [r3, #26]

	/* Set pin as input */
	TM_GPIO_Init(TM_DISCO_BUTTON_PORT, TM_DISCO_BUTTON_PIN, TM_GPIO_Mode_IN, TM_GPIO_OType_PP, TM_DISCO_BUTTON_PULL, TM_GPIO_Speed_Low);
 80017c6:	2300      	movs	r3, #0
 80017c8:	9301      	str	r3, [sp, #4]
 80017ca:	2302      	movs	r3, #2
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	2300      	movs	r3, #0
 80017d0:	2200      	movs	r2, #0
 80017d2:	2101      	movs	r1, #1
 80017d4:	4810      	ldr	r0, [pc, #64]	; (8001818 <main+0x84>)
 80017d6:	f7ff fa6b 	bl	8000cb0 <TM_GPIO_Init>

  /* Infinite loop */
  while (1)
  {
	  /* If button pressed */
	 if (TM_DISCO_ButtonPressed()) {
 80017da:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <main+0x84>)
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	bf14      	ite	ne
 80017e6:	2301      	movne	r3, #1
 80017e8:	2300      	moveq	r3, #0
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	bf14      	ite	ne
 80017f0:	2301      	movne	r3, #1
 80017f2:	2300      	moveq	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d004      	beq.n	8001804 <main+0x70>
		 /* Turn on leds */
		 TM_DISCO_LedOn(LED_RED | LED_GREEN);
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <main+0x80>)
 80017fc:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8001800:	831a      	strh	r2, [r3, #24]
 8001802:	e7ea      	b.n	80017da <main+0x46>
	 } else {
		 /* Turn off leds */
		 TM_DISCO_LedOff(LED_RED | LED_GREEN);
 8001804:	4b03      	ldr	r3, [pc, #12]	; (8001814 <main+0x80>)
 8001806:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800180a:	835a      	strh	r2, [r3, #26]
	 if (TM_DISCO_ButtonPressed()) {
 800180c:	e7e5      	b.n	80017da <main+0x46>
 800180e:	bf00      	nop
 8001810:	20000034 	.word	0x20000034
 8001814:	40021800 	.word	0x40021800
 8001818:	40020000 	.word	0x40020000

0800181c <sEE_TIMEOUT_UserCallback>:
/*
 * Callback used by stm324xg_eval_i2c_ee.c.
 * Refer to stm324xg_eval_i2c_ee.h for more info.
 */
extern "C" uint32_t sEE_TIMEOUT_UserCallback(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  while (1)
 8001820:	e7fe      	b.n	8001820 <sEE_TIMEOUT_UserCallback+0x4>
	...

08001824 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001824:	f8df d034 	ldr.w	sp, [pc, #52]	; 800185c <LoopFillZerobss+0x14>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001828:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800182a:	e003      	b.n	8001834 <LoopCopyDataInit>

0800182c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800182e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001830:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001832:	3104      	adds	r1, #4

08001834 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001834:	480b      	ldr	r0, [pc, #44]	; (8001864 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001838:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800183a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800183c:	d3f6      	bcc.n	800182c <CopyDataInit>
  ldr  r2, =_sbss
 800183e:	4a0b      	ldr	r2, [pc, #44]	; (800186c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001840:	e002      	b.n	8001848 <LoopFillZerobss>

08001842 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001842:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001844:	f842 3b04 	str.w	r3, [r2], #4

08001848 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001848:	4b09      	ldr	r3, [pc, #36]	; (8001870 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800184a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800184c:	d3f9      	bcc.n	8001842 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800184e:	f000 f83b 	bl	80018c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001852:	f000 f8eb 	bl	8001a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001856:	f7ff ff9d 	bl	8001794 <main>
  bx  lr    
 800185a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800185c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001860:	08001a94 	.word	0x08001a94
  ldr  r0, =_sdata
 8001864:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001868:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 800186c:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8001870:	2000007c 	.word	0x2000007c

08001874 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001874:	e7fe      	b.n	8001874 <ADC_IRQHandler>

08001876 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001888:	e7fe      	b.n	8001888 <HardFault_Handler+0x4>

0800188a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800188e:	e7fe      	b.n	800188e <MemManage_Handler+0x4>

08001890 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001894:	e7fe      	b.n	8001894 <BusFault_Handler+0x4>

08001896 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800189a:	e7fe      	b.n	800189a <UsageFault_Handler+0x4>

0800189c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018cc:	4a16      	ldr	r2, [pc, #88]	; (8001928 <SystemInit+0x60>)
 80018ce:	4b16      	ldr	r3, [pc, #88]	; (8001928 <SystemInit+0x60>)
 80018d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80018dc:	4a13      	ldr	r2, [pc, #76]	; (800192c <SystemInit+0x64>)
 80018de:	4b13      	ldr	r3, [pc, #76]	; (800192c <SystemInit+0x64>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018e8:	4b10      	ldr	r3, [pc, #64]	; (800192c <SystemInit+0x64>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80018ee:	4a0f      	ldr	r2, [pc, #60]	; (800192c <SystemInit+0x64>)
 80018f0:	4b0e      	ldr	r3, [pc, #56]	; (800192c <SystemInit+0x64>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80018f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018fc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80018fe:	4b0b      	ldr	r3, [pc, #44]	; (800192c <SystemInit+0x64>)
 8001900:	4a0b      	ldr	r2, [pc, #44]	; (8001930 <SystemInit+0x68>)
 8001902:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001904:	4a09      	ldr	r2, [pc, #36]	; (800192c <SystemInit+0x64>)
 8001906:	4b09      	ldr	r3, [pc, #36]	; (800192c <SystemInit+0x64>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800190e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <SystemInit+0x64>)
 8001912:	2200      	movs	r2, #0
 8001914:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001916:	f000 f80d 	bl	8001934 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800191a:	4b03      	ldr	r3, [pc, #12]	; (8001928 <SystemInit+0x60>)
 800191c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001920:	609a      	str	r2, [r3, #8]
#endif
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	e000ed00 	.word	0xe000ed00
 800192c:	40023800 	.word	0x40023800
 8001930:	24003010 	.word	0x24003010

08001934 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800193a:	2300      	movs	r3, #0
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	2300      	movs	r3, #0
 8001940:	603b      	str	r3, [r7, #0]
                   (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

#else /* PLL_SOURCE_HSE_BYPASS or PLL_SOURCE_HSE */

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001942:	4a36      	ldr	r2, [pc, #216]	; (8001a1c <SetSysClock+0xe8>)
 8001944:	4b35      	ldr	r3, [pc, #212]	; (8001a1c <SetSysClock+0xe8>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800194c:	6013      	str	r3, [r2, #0]
  RCC->CR |= ((uint32_t)RCC_CR_HSEBYP);
#endif   /* PLL_SOURCE_HSE_BYPASS */
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800194e:	4b33      	ldr	r3, [pc, #204]	; (8001a1c <SetSysClock+0xe8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001956:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3301      	adds	r3, #1
 800195c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d103      	bne.n	800196c <SetSysClock+0x38>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800196a:	d1f0      	bne.n	800194e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800196c:	4b2b      	ldr	r3, [pc, #172]	; (8001a1c <SetSysClock+0xe8>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d002      	beq.n	800197e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001978:	2301      	movs	r3, #1
 800197a:	603b      	str	r3, [r7, #0]
 800197c:	e001      	b.n	8001982 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800197e:	2300      	movs	r3, #0
 8001980:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d102      	bne.n	800198e <SetSysClock+0x5a>
  {
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001988:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <SetSysClock+0xe8>)
 800198a:	4a25      	ldr	r2, [pc, #148]	; (8001a20 <SetSysClock+0xec>)
 800198c:	605a      	str	r2, [r3, #4]
         configuration. User can add here some code to deal with this error */
  }
#endif /*PLL_SOURCE_HSI*/
  
      /* Select regulator voltage output Scale 1 mode, System frequency up to 180 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800198e:	4a23      	ldr	r2, [pc, #140]	; (8001a1c <SetSysClock+0xe8>)
 8001990:	4b22      	ldr	r3, [pc, #136]	; (8001a1c <SetSysClock+0xe8>)
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001998:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800199a:	4a22      	ldr	r2, [pc, #136]	; (8001a24 <SetSysClock+0xf0>)
 800199c:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <SetSysClock+0xf0>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019a4:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80019a6:	4a1d      	ldr	r2, [pc, #116]	; (8001a1c <SetSysClock+0xe8>)
 80019a8:	4b1c      	ldr	r3, [pc, #112]	; (8001a1c <SetSysClock+0xe8>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80019ae:	4a1b      	ldr	r2, [pc, #108]	; (8001a1c <SetSysClock+0xe8>)
 80019b0:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <SetSysClock+0xe8>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019b8:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80019ba:	4a18      	ldr	r2, [pc, #96]	; (8001a1c <SetSysClock+0xe8>)
 80019bc:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <SetSysClock+0xe8>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80019c4:	6093      	str	r3, [r2, #8]

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80019c6:	4a15      	ldr	r2, [pc, #84]	; (8001a1c <SetSysClock+0xe8>)
 80019c8:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <SetSysClock+0xe8>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019d0:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80019d2:	bf00      	nop
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <SetSysClock+0xe8>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0f9      	beq.n	80019d4 <SetSysClock+0xa0>
    {
    }

    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80019e0:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <SetSysClock+0xf4>)
 80019e2:	f240 7205 	movw	r2, #1797	; 0x705
 80019e6:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80019e8:	4a0c      	ldr	r2, [pc, #48]	; (8001a1c <SetSysClock+0xe8>)
 80019ea:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <SetSysClock+0xe8>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f023 0303 	bic.w	r3, r3, #3
 80019f2:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80019f4:	4a09      	ldr	r2, [pc, #36]	; (8001a1c <SetSysClock+0xe8>)
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <SetSysClock+0xe8>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f043 0302 	orr.w	r3, r3, #2
 80019fe:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001a00:	bf00      	nop
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <SetSysClock+0xe8>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 030c 	and.w	r3, r3, #12
 8001a0a:	2b08      	cmp	r3, #8
 8001a0c:	d1f9      	bne.n	8001a02 <SetSysClock+0xce>
    {
    }
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	07405a08 	.word	0x07405a08
 8001a24:	40007000 	.word	0x40007000
 8001a28:	40023c00 	.word	0x40023c00

08001a2c <__libc_init_array>:
 8001a2c:	b570      	push	{r4, r5, r6, lr}
 8001a2e:	4e0d      	ldr	r6, [pc, #52]	; (8001a64 <__libc_init_array+0x38>)
 8001a30:	4c0d      	ldr	r4, [pc, #52]	; (8001a68 <__libc_init_array+0x3c>)
 8001a32:	1ba4      	subs	r4, r4, r6
 8001a34:	10a4      	asrs	r4, r4, #2
 8001a36:	2500      	movs	r5, #0
 8001a38:	42a5      	cmp	r5, r4
 8001a3a:	d109      	bne.n	8001a50 <__libc_init_array+0x24>
 8001a3c:	4e0b      	ldr	r6, [pc, #44]	; (8001a6c <__libc_init_array+0x40>)
 8001a3e:	4c0c      	ldr	r4, [pc, #48]	; (8001a70 <__libc_init_array+0x44>)
 8001a40:	f000 f818 	bl	8001a74 <_init>
 8001a44:	1ba4      	subs	r4, r4, r6
 8001a46:	10a4      	asrs	r4, r4, #2
 8001a48:	2500      	movs	r5, #0
 8001a4a:	42a5      	cmp	r5, r4
 8001a4c:	d105      	bne.n	8001a5a <__libc_init_array+0x2e>
 8001a4e:	bd70      	pop	{r4, r5, r6, pc}
 8001a50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a54:	4798      	blx	r3
 8001a56:	3501      	adds	r5, #1
 8001a58:	e7ee      	b.n	8001a38 <__libc_init_array+0xc>
 8001a5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a5e:	4798      	blx	r3
 8001a60:	3501      	adds	r5, #1
 8001a62:	e7f2      	b.n	8001a4a <__libc_init_array+0x1e>
 8001a64:	08001a8c 	.word	0x08001a8c
 8001a68:	08001a8c 	.word	0x08001a8c
 8001a6c:	08001a8c 	.word	0x08001a8c
 8001a70:	08001a90 	.word	0x08001a90

08001a74 <_init>:
 8001a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a76:	bf00      	nop
 8001a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a7a:	bc08      	pop	{r3}
 8001a7c:	469e      	mov	lr, r3
 8001a7e:	4770      	bx	lr

08001a80 <_fini>:
 8001a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a82:	bf00      	nop
 8001a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a86:	bc08      	pop	{r3}
 8001a88:	469e      	mov	lr, r3
 8001a8a:	4770      	bx	lr
